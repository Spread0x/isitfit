# https://click.palletsprojects.com/en/7.x/testing/?highlight=testing

import click
import pytest


@pytest.fixture(scope='function')
def runner():
  from click.testing import CliRunner
  runner = CliRunner()
  return runner


@pytest.fixture(scope='function')
def ping_matomo(mocker):
  def mockreturn(*args, **kwargs): return "foo"
  ping_matomo = mocker.patch('isitfit.utils.ping_matomo', side_effect=mockreturn)
  return ping_matomo


def test_IsitfitCommand_exceptionsForwarded(ping_matomo, runner):
  from isitfit.cli.click_descendents import IsitfitCommand

  @click.command(cls=IsitfitCommand)
  def donothing(): pass
  result = runner.invoke(donothing)
  ping_matomo.assert_not_called()

  @click.command(cls=IsitfitCommand)
  def raiseexc(): raise Exception("hey")
  result = runner.invoke(raiseexc)
  ping_matomo.assert_called()


def test_IsitfitCommand_footerDisplayed(runner):
  from isitfit.cli.click_descendents import IsitfitCommand

  @click.command(cls=IsitfitCommand)
  def donothing(): pass
  result = runner.invoke(donothing)

  assert "Generated by" in result.output


@pytest.fixture(scope='function', params=range(16))
def group_case(request):
  from isitfit.cli.click_descendents import isitfit_group
  from isitfit.cli.click_descendents import IsitfitCommand

  @click.group()
  def group_click_pass(): pass

  @click.group()
  def group_click_raise(): raise Exception("yoo")

  @isitfit_group()
  def group_isitfit_pass(): pass

  @isitfit_group()
  def group_isitfit_raise(): raise Exception("yoo")

  @click.command()
  def cmd_click_pass(): pass

  @click.command()
  def cmd_click_raise(): raise Exception("hey")

  @click.command(cls=IsitfitCommand)
  def cmd_isitfit_pass(): pass

  @click.command(cls=IsitfitCommand)
  def cmd_isitfit_raise(): raise Exception("hey")

  out = [
    {'g':group_click_pass, 'c':cmd_click_pass,    'd':'cmd_isitfit_pass',  'a':False},
    {'g':group_click_pass, 'c':cmd_click_raise,   'd':'cmd_isitfit_raise', 'a':False},
    {'g':group_click_pass, 'c':cmd_isitfit_pass,  'd':'cmd_isitfit_pass',  'a':False},
    {'g':group_click_pass, 'c':cmd_isitfit_raise, 'd':'cmd_isitfit_raise', 'a':True },

    {'g':group_click_raise, 'c':cmd_click_pass,    'd':'cmd_isitfit_pass',  'a':False},
    {'g':group_click_raise, 'c':cmd_click_raise,   'd':'cmd_isitfit_raise', 'a':False},
    {'g':group_click_raise, 'c':cmd_isitfit_pass,  'd':'cmd_isitfit_pass',  'a':False},
    {'g':group_click_raise, 'c':cmd_isitfit_raise, 'd':'cmd_isitfit_raise', 'a':False}, # group fails before command exception caught

    {'g':group_isitfit_pass, 'c':cmd_click_pass,    'd':'cmd_isitfit_pass',  'a':False},
    {'g':group_isitfit_pass, 'c':cmd_click_raise,   'd':'cmd_isitfit_raise', 'a':True },
    {'g':group_isitfit_pass, 'c':cmd_isitfit_pass,  'd':'cmd_isitfit_pass',  'a':False},
    {'g':group_isitfit_pass, 'c':cmd_isitfit_raise, 'd':'cmd_isitfit_raise', 'a':True },

    {'g':group_isitfit_raise, 'c':cmd_click_pass,    'd':'cmd_isitfit_pass',  'a':True},
    {'g':group_isitfit_raise, 'c':cmd_click_raise,   'd':'cmd_isitfit_raise', 'a':True},
    {'g':group_isitfit_raise, 'c':cmd_isitfit_pass,  'd':'cmd_isitfit_pass',  'a':True},
    {'g':group_isitfit_raise, 'c':cmd_isitfit_raise, 'd':'cmd_isitfit_raise', 'a':True},
  ]
  return out[request.param]


def test_IsitfitGroup_exceptionsForwarded(ping_matomo, runner, group_case):
  group_case['g'].add_command(group_case['c'], name=group_case['d'])

  # invoke and assert
  result = runner.invoke(group_case['g'], [group_case['d']])
  if group_case['a']:
    ping_matomo.assert_called()
  else:
    ping_matomo.assert_not_called()


@pytest.mark.skip(reason="This test needs to be fixed to replicate the actual behavior")
def test_ClickOption_failsWithPrompt(runner):
  @click.group()
  def isitfit(): pass

  @click.group()
  @click.option('--prompt', default='foo', prompt='my prompt', type=str)
  def cost(prompt): pass

  @click.command()
  def analyze(): pass

  cost.add_command(analyze)
  isitfit.add_command(cost)

  # invoke and assert
  result = runner.invoke(isitfit, ['cost', '--help'])
  assert False # the invoke above is expected to halt at the prompt and fail, but not working as expected ATM


def test_IsitfitOption_worksWithPrompt(runner):
  """
  This test is the working counter-part of test_ClickOption_failsWithPrompt which was expected to fail
  """
  from isitfit.cli.click_descendents import isitfit_option

  @click.group()
  def isitfit(): pass

  @click.group()
  @isitfit_option('--prompt', default='foo', prompt='my prompt', type=str)
  def cost(prompt): pass

  @click.command()
  def analyze(): pass

  cost.add_command(analyze)
  isitfit.add_command(cost)

  # invoke and assert
  result = runner.invoke(isitfit, ['cost', '--help'])
  assert True


def test_IsitfitOptionProfile_ok(runner):
  from isitfit.cli.click_descendents import isitfit_option_profile

  @click.group()
  def isitfit(): pass

  @click.group()
  @isitfit_option_profile()
  def cost(prompt): pass

  @click.command()
  def analyze(): pass

  cost.add_command(analyze)
  isitfit.add_command(cost)

  # invoke and assert
  result = runner.invoke(isitfit, ['cost', '--help'])
  assert True
